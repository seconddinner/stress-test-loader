# name: Pulumi
# on:
#   push: 
#     branches:
#       - 't1-backend-serverless'
# jobs:
#   preview:
#     name: Preview
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 1
#       - uses: actions/setup-dotnet@v1
#         with:
#           dotnet-version: 3.1.x
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-region: us-west-2
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       - uses: pulumi/actions@v3
#         with:
#           command: preview
#           stack-name: dev
#           work-dir: games/t1/backend
#         env:
#           PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}



name: build-test

on:
  # we are only going to run it on PR
  push: 
    branches:
      - 't1-backend-serverless'
  pull_request:
    paths-ignore: [ '*.md' ]
    branches:
      - main
      - '**'

permissions:
  id-token: write
  contents: read

jobs:
  stresstest-build-test:
    runs-on: ubuntu-latest
    container: seconddinner/build:0.0.3
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          stress-test-loader:
            - 'stress-test-loader/**'
          packer:
            - 'stress-test-loader/cicd/**'
          docs:
            - 'docs/**'
          infra-terraform:
            - 'infra-terraform/**'
            
    - name: build
      if: steps.filter.outputs.stress-test-loader  == 'true'
      run: cd stress-test-loader; bash ./build.sh
    - name: AWS Setup
      if: steps.filter.outputs.infra-terraform  == 'true'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-west-2
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: stresstest-loader-githubaction-aws-role
    - name: packer build
      if: steps.filter.outputs.packer  == 'true'
      run: |
        cd $GITHUB_WORKSPACE/stress-test-loader
        bash ./cicd/ami/build-stress-test-loader.sh

  backend-test:
    runs-on: ubuntu-latest
    container: seconddinner/build:0.0.3
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          infra-terraform:
            - 'infra-terraform/**'
          games:
            - 'games/**'
    
    - name: AWS Setup
      if: | 
        steps.filter.outputs.infra-terraform  == 'true' || steps.filter.outputs.games  == 'true'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-west-2
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: stresstest-loader-githubaction-aws-role
    
    - name: pulumi 
      if: steps.filter.outputs.games  == 'true'
      run: |
        cd $GITHUB_WORKSPACE/games/t1/backend
        pulumi preview --stack dev --non-interactive
        pulumi up --stack dev --non-interactive  --skip-preview > pulumi.output.json
        cat pulumi.output.json
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}  
 

    - name: terraform 
      if: steps.filter.outputs.infra-terraform  == 'true'
      run: | 
        cd $GITHUB_WORKSPACE/infra-terraform/instance/single-region
        cp provider.tf.example provider.tf
        terraform init
        terraform destroy -auto-approve  -var 'public_key=ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB04L+iBL3YLCMTVl9S5gIEQZPsuNVExl54YNUB3oZD5'  -var 'stress_test_loader_allowed_cidr=["1.1.1.1/32"]'  --var owner_id=${{ secrets.OWNER_ID }} --var 'environment=stresstest-git-action' 
        terraform apply -auto-approve  -var 'public_key=ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB04L+iBL3YLCMTVl9S5gIEQZPsuNVExl54YNUB3oZD5'  -var 'stress_test_loader_allowed_cidr=["1.1.1.1/32"]'  --var owner_id=${{ secrets.OWNER_ID }} --var 'environment=stresstest-git-action' 
        terraform destroy -auto-approve  -var 'public_key=ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB04L+iBL3YLCMTVl9S5gIEQZPsuNVExl54YNUB3oZD5'  -var 'stress_test_loader_allowed_cidr=["1.1.1.1/32"]'  --var owner_id=${{ secrets.OWNER_ID }} --var 'environment=stresstest-git-action' 

    - name: pulumi destroy
      if: steps.filter.outputs.games  == 'true'
      run: |
        cd $GITHUB_WORKSPACE/games/t1/backend
        pulumi stack  select dev
        pulumi state  unprotect --all --non-interactive 
        pulumi destroy --stack dev --non-interactive --skip-preview -j > pulumi_destroy.output.json
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}  
