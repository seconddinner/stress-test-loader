// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/stresstestloader.proto

package stresstestloader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StressTestLoaderClient is the client API for StressTestLoader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StressTestLoaderClient interface {
	// Sends a list of stresstest public ip to varify
	StartStressTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error)
	StopStressTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error)
}

type stressTestLoaderClient struct {
	cc grpc.ClientConnInterface
}

func NewStressTestLoaderClient(cc grpc.ClientConnInterface) StressTestLoaderClient {
	return &stressTestLoaderClient{cc}
}

func (c *stressTestLoaderClient) StartStressTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := c.cc.Invoke(ctx, "/stresstestloader.StressTestLoader/StartStressTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stressTestLoaderClient) StopStressTest(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := c.cc.Invoke(ctx, "/stresstestloader.StressTestLoader/StopStressTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StressTestLoaderServer is the server API for StressTestLoader service.
// All implementations must embed UnimplementedStressTestLoaderServer
// for forward compatibility
type StressTestLoaderServer interface {
	// Sends a list of stresstest public ip to varify
	StartStressTest(context.Context, *TestRequest) (*TestReply, error)
	StopStressTest(context.Context, *TestRequest) (*TestReply, error)
	mustEmbedUnimplementedStressTestLoaderServer()
}

// UnimplementedStressTestLoaderServer must be embedded to have forward compatible implementations.
type UnimplementedStressTestLoaderServer struct {
}

func (UnimplementedStressTestLoaderServer) StartStressTest(context.Context, *TestRequest) (*TestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStressTest not implemented")
}
func (UnimplementedStressTestLoaderServer) StopStressTest(context.Context, *TestRequest) (*TestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStressTest not implemented")
}
func (UnimplementedStressTestLoaderServer) mustEmbedUnimplementedStressTestLoaderServer() {}

// UnsafeStressTestLoaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StressTestLoaderServer will
// result in compilation errors.
type UnsafeStressTestLoaderServer interface {
	mustEmbedUnimplementedStressTestLoaderServer()
}

func RegisterStressTestLoaderServer(s grpc.ServiceRegistrar, srv StressTestLoaderServer) {
	s.RegisterService(&StressTestLoader_ServiceDesc, srv)
}

func _StressTestLoader_StartStressTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StressTestLoaderServer).StartStressTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stresstestloader.StressTestLoader/StartStressTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StressTestLoaderServer).StartStressTest(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StressTestLoader_StopStressTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StressTestLoaderServer).StopStressTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stresstestloader.StressTestLoader/StopStressTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StressTestLoaderServer).StopStressTest(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StressTestLoader_ServiceDesc is the grpc.ServiceDesc for StressTestLoader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StressTestLoader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stresstestloader.StressTestLoader",
	HandlerType: (*StressTestLoaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartStressTest",
			Handler:    _StressTestLoader_StartStressTest_Handler,
		},
		{
			MethodName: "StopStressTest",
			Handler:    _StressTestLoader_StopStressTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stresstestloader.proto",
}
