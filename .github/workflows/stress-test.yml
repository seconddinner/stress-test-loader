name: build-test

on:
  # we are only going to run it on PR
  pull_request:
    paths-ignore: [ '*.md' ]
    branches:
      - main
      - '**'
  push:
    branches:
      - main
      - wwu/test-github-actions
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.run_id }}

permissions:
  id-token: write
  contents: read

jobs:

  stresstest-start-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: AWS Setup
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-region: us-west-2
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: stresstest-loader-githubaction-aws-role

    - name: simple stress test client build
      run: |
        cd $GITHUB_WORKSPACE/simple-stress-test-client/StressTest
        dotnet publish -r linux-arm64 --self-contained true -c Release
        cd bin/Release
        cd "$(ls -d */ | head -n 1)"
        cd linux-arm64/publish
        tar czf /tmp/s3_key.tgz ./
        aws s3 cp /tmp/s3_key.tgz s3://${{ s3_bucket_name }}/s3_key.tgz
      with:
        s3_bucket_name: stresstest-client
        s3_key: simple-stress-test-client-${GITHUB_SHA::7}

    -name: run stress test
      run: |
        cd $GITHUB_WORKSPACE/stress-test-loader/client
        json='{
            "s3": "${{ s3_bucket_name }}",
            "s3key": "${{ s3_key }}",
            "loadtestExec": "${{ exec_name }}",
            "envVariableList": [
                {
                    "EnvName": "${{ env1_name }}",
                    "EnvValue": "${{ env1_value }}"
                },
                {
                    "EnvName": "${{ env2_name }}",
                    "EnvValue": "${{ env2_name }}"
                },
                {
                    "EnvName": "${{ env3_name }}",
                    "EnvValue": "${{ env3_name }}"
                }
            ]
        }'
        echo "$json" > stresstest.json
        aws ec2 describe-instances --region us-west-2 \
          --query 'Reservations[*].Instances[*].{"public_ip":PublicIpAddress}' \
          --filters Name=instance-state-name,Values=running --output json > /tmp/IP.json
        go run main.go stresstest.json /tmp/IP.json
      with:
        s3_bucket_name: stresstest-client
        s3_key: simple-stress-test-client-${GITHUB_SHA::7}
        exec_name: StressTest
        env1_name: num_pings
        env1_value: 10
        env2_name: ping_interval
        env2_value: 500
        env3_name: host
        env3_value: www.apple.com
        