name: build-test

on:
  # we are only going to run it on PR
  pull_request:
    paths-ignore: [ '*.md' ]
    branches:
      - main
      - '**'
  push:
    branches:
      - main
      - wwu/test-github-actions
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.run_id }}

permissions:
  id-token: write
  contents: read

jobs:
  stresstest-build-test:
    runs-on: ubuntu-latest
    environment: TEST
    #container: seconddinner/build:${{ vars.BUILD_CONTAINER_VERSION }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          stress-test-loader:
            - 'stress-test-loader/**'
          packer:
            - 'stress-test-loader/cicd/**'
          docs:
            - 'docs/**'
          infra-pulumi:
            - 'infra-pulumi/**'
    - name: build
      if: steps.filter.outputs.stress-test-loader  == 'true'
      run: cd stress-test-loader; bash ./build.sh
    - name: AWS Setup
      if: steps.filter.outputs.infra-pulumi  == 'true'
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-region: us-west-2
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: stresstest-loader-githubaction-aws-role
    - name: packer build
      if: steps.filter.outputs.packer  == 'true'
      run: |
        cd $GITHUB_WORKSPACE/stress-test-loader
        rm -rf cert
        mkdir cert
        cd cert
        echo "${{ secrets.CA_KEY }}" > ca-key.pem
        openssl req -new -x509 -key ca-key.pem -out ca-cert.pem -days 365 -subj "/O=seconddinner"
        echo "Generating server's private key and CSR"
        openssl req -newkey rsa:4096 -nodes -keyout server-key.pem -out server-req.pem -subj "/O=seconddinner"
        echo "Signing server's CSR"
        openssl x509 -req -in server-req.pem -days 60 -CA ca-cert.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem
        openssl x509 -in server-cert.pem -noout -text
        cd $GITHUB_WORKSPACE/stress-test-loader
        bash ./cicd/ami/build-stress-test-loader.sh

  backend-test:
    runs-on: ubuntu-latest
    environment: TEST
    #container: seconddinner/build:${{ vars.BUILD_CONTAINER_VERSION }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          infra-pulumi:
            - 'infra-pulumi/**'
          games:
            - 'games/**'
    
    - name: AWS Setup
      if: |
        steps.filter.outputs.infra-pulumi  == 'true' || steps.filter.outputs.games  == 'true'
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-region: us-west-2
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: stresstest-loader-githubaction-aws-role
    
    - name: pulumi backend infra
      if: steps.filter.outputs.games  == 'true'
      run: |
        cd $GITHUB_WORKSPACE/games/t1/WebAPILambda
        dotnet  publish  -c Release -r linux-arm64 --no-self-contained
        zip -j -r bin/Release/net6.0/linux-arm64/lambda.zip bin/Release/net6.0/linux-arm64/publish/
        cd $GITHUB_WORKSPACE/games/t1/backend
        pulumi login ${{ secrets.SD_STRESSTESTLOADER_PULUMI_BACKEND }}
        pulumi preview --stack stresstest-loader-cicd --non-interactive
        pulumi up --stack stresstest-loader-cicd --non-interactive  --skip-preview > pulumi.output.json
        cd $GITHUB_WORKSPACE/games/t1/backend-api
        dotnet run
        # cat pulumi.output.json
      env:
        PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

    - name: pulumi stress test infra
      #if: steps.filter.outputs.infra-pulumi  == 'true'
      run: |
        cd $GITHUB_WORKSPACE/infra-pulumi/Infra.Pulumi/Infra.Pulumi
        public_ip=$(curl -s https://ipinfo.io/ip)
        export stress_test_loader_allowed_cidr="$public_ip/32"
        pulumi login ${{ secrets.SD_STRESSTESTLOADER_PULUMI_BACKEND }}
        dotnet run --project-name stress-test-loader-pulumi --stack-name dev
      env:
        PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
        public_key: ${{ vars.PUBLIC_KEY }}
        environment: ${{ vars.ENVIRONMENT }}
        regions: ${{ vars.REGIONS }}
        s3_client_bucket_name: ${{ vars.S3_CLIENT_BUCKET_NAME }}
        s3_log_bucket_name: ${{ vars.S3_LOG_BUCKET_NAME }}

    - name: simple stress test client build
      run: |
        cd $GITHUB_WORKSPACE/simple-stress-test-client/StressTest
        dotnet publish -r linux-arm64 --self-contained true -c Release
        cd bin/Release
        cd "$(ls -d */ | head -n 1)"
        cd linux-arm64/publish
        export s3_key=simple-stress-test-client-${GITHUB_SHA::7}.tgz
        tar czf /tmp/s3_key.tgz ./
        aws s3 cp /tmp/s3_key.tgz s3://$s3_client_bucket_name/$s3_key
      env:
        s3_client_bucket_name: ${{ vars.S3_CLIENT_BUCKET_NAME }}

    - name: run stress test
      run: |
        cd $GITHUB_WORKSPACE/stress-test-loader
        rm -rf client/cert
        mkdir client/cert
        echo "${{ secrets.CA_KEY }}" > ca-key.pem
        openssl req -new -x509 -key ca-key.pem -out ca-cert.pem -days 365 -subj "/O=seconddinner"
        cp ca-key.pem client/cert/ca-key.pem
        cp ca-cert.pem client/cert/ca-cert.pem
        cd $GITHUB_WORKSPACE/stress-test-loader/client/cert
        echo "Generating client's private key and CSR"
        openssl req -newkey rsa:4096 -nodes -keyout client-key.pem -out client-req.pem -subj "/O=seconddinner"
        echo "Signing client's CSR"
        openssl x509 -req -in client-req.pem -days 60 -CA ca-cert.pem -CAkey ca-key.pem -CAcreateserial -out client-cert.pem
        openssl x509 -in client-cert.pem -noout -text
        cd $GITHUB_WORKSPACE/stress-test-loader/client
        export s3_key=simple-stress-test-client-${GITHUB_SHA::7}.tgz
        json=$(cat <<EOF
        {
            "s3": "$s3_client_bucket_name",
            "s3key": "$s3_key",
            "loadtestExec": "$exec_name",
            "envVariableList": [
                {
                    "EnvName": "$env1_name",
                    "EnvValue": "$env1_value"
                },
                {
                    "EnvName": "$env2_name",
                    "EnvValue": "$env2_value"
                },
                {
                    "EnvName": "$env3_name",
                    "EnvValue": "$env3_value"
                }
            ]
        }
        EOF
        )
        echo "$json" > stresstest.json
        go run main.go stresstest.json /tmp/IP.json
      env:
        s3_client_bucket_name: ${{ vars.S3_CLIENT_BUCKET_NAME }}
        exec_name: ${{ vars.EXEC_NAME }}
        env1_name: ${{ vars.ENV1_NAME }}
        env1_value: ${{ vars.ENV1_VALUE }}
        env2_name: ${{ vars.ENV2_NAME }}
        env2_value: ${{ vars.ENV2_VALUE }}
        env3_name: ${{ vars.ENV3_NAME }}
        env3_value: ${{ vars.ENV3_VALUE }}
    
    - name: Wait for stress test to finish (sleep for ${{ vars.STRESS_TEST_TIME }} seconds)
      run: sleep ${{ vars.STRESS_TEST_TIME }}

    - name: get stress test result
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
        chmod 600 id_rsa
        cat /tmp/IP.json | jq -r '.[][] | .public_ip' > /tmp/IP.txt
        cat /tmp/IP.txt | while read -r ip; do
          echo "Connecting to $ip through ssh"
          ssh -i id_rsa -o StrictHostKeyChecking=no ubuntu@$ip "cat /tmp/stress-test-log"
        done

    - name: pulumi destroy stress test infra
      if: always()
      run: |
        cd $GITHUB_WORKSPACE/infra-pulumi/Infra.Pulumi/Infra.Pulumi
        pulumi login ${{ secrets.SD_STRESSTESTLOADER_PULUMI_BACKEND }}
        dotnet run --project-name stress-test-loader-pulumi --stack-name dev --destroy
      env:
        PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
        public_key: ${{ vars.PUBLIC_KEY }}
        stress_test_loader_allowed_cidr: "1.1.1.1/32" # dummy value
        environment: ${{ vars.ENVIRONMENT }}
        s3_client_bucket_name: ${{ vars.S3_CLIENT_BUCKET_NAME }}
        s3_log_bucket_name: ${{ vars.S3_LOG_BUCKET_NAME }}
        
    - name: pulumi destroy backend infra
      if: steps.filter.outputs.games  == 'true'
      run: |
        cd $GITHUB_WORKSPACE/games/t1/backend
        pulumi login ${{ secrets.SD_STRESSTESTLOADER_PULUMI_BACKEND }}
        pulumi stack  select stresstest-loader-cicd
        pulumi state  unprotect --all --non-interactive
        pulumi destroy --stack stresstest-loader-cicd --non-interactive --skip-preview -j > pulumi_destroy.output.json
        cd $GITHUB_WORKSPACE/games/t1/backend-api
        dotnet run destroy
      env:
        PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

    - name: delete simple stress test client exec in s3
      run: |
        export s3_key=simple-stress-test-client-${GITHUB_SHA::7}.tgz
        aws s3 rm s3://$s3_client_bucket_name/$s3_key
      env:
        s3_client_bucket_name: ${{ vars.S3_CLIENT_BUCKET_NAME }}